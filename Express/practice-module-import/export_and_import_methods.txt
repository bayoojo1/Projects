
Instruction
Importing and Exporting Modules in Node.js

This reference step covers the various ways to import and export modules in Node.js.
Export a Module

    Set module.exports to an object containing multiple functions:

    module.exports = { 
      reverseString: (string) => {...},
      shortenString: (string) => {...}
    };

    Create multiple named functions and export them together in the fileâ€™s module.exports object:

    const reverseString = (string) => {...};
    const shortenString = (string) => {...};

    module.exports = { reverseString, shortenString };

    Use exports without module to export multiple items separately:

    exports.reverseString = () => {...};
    exports.shortenString = () => {...};

Import a Module

    Import the entire module and call each exported item with moduleName.functionName(), for example:

    // Import helpers module
    const helpers = require('./helpers');

    // Home route
    router.get('/', (req, res) => {
      const reversedGreeting = helpers.reverseString('...');
      const shortenedDesc = helpers.shortenString('...');

      res.send(...);
    });

    Import each value from the module separately:

    // Import helpers
    const reverseString = require('./helpers').reverseString;
    const shortenString = require('./helpers').shortenString;

    // Home route
    router.get('/', (req, res) => {
      const reversedGreeting = reverseString('...');
      const shortenedDesc = shortenString('...');

      res.send(...);
    });

    Use destructuring assignment to unpack the values from module.exports into distinct variables:

    // Import helpers
    const { reverseString, shortenString }  = require('./helpers');

    // Home route
    router.get('/', (req, res) => {
      const reversedGreeting = reverseString('...');
      const shortenedDesc = shortenString('...');

      res.send(...);
    });

When you export and import a module, you're packaging up bits of functionality, assigning them to an object, and passing that object from one file to another, to be safely used without cluttering the global namespace.
Resources