
Instruction
Install and Use Sequelize CLI
Overview

NOTE: You can create an express application skeleton with the instruction in this page: https://expressjs.com/en/starter/generator.html

Many development tools have what's called a CLI, or command-line interface, which is a special piece of software that's used to aid in the development process. Sequelize is no different, it has a useful command-line interface for initializing and bootstrapping your database project, creating models, database configuration files and more. The CLI operates with many relational databases like PostgreSQL, MySQL, MSSQL, and Sqlite.

In this workshop, we'll once again use SQLite for our database. SQLite is easy-to-use and doesn't require you to install or configure anything on your system to use it, making it an ideal database for learning projects. Both Sequelize and SQLite are already installed as project dependencies.
Install Sequelize CLI and Initialize a Database Project

    In your Terminal (or console app), run the command:

    $ npm install sequelize-cli@^5.5.1

    Most CLIs have a help command to provide more information about its set of commands and help you find which command to use if you're stuck. You can run the sequelize CLI with:

    $ npx sequelize --help

    This brings up all the commands you're able to run using the CLI. Start by using the init command to initialize the database project.

    Make sure that you're in the project’s base root directory, and run the command:

    $ npx sequelize init

    If you're not familiar with the npx command, it's an npm utility that makes it easier to interact with CLIs and run packages, as well as install and manage npm dependencies. You can read more about npx in the "Resources" section of this instruction step.

Running npx sequelize init initializes all the configuration code, folders and helpers needed for the application. It sets up four directories: config, migrations, models, and seeders.
Note: The seeders folder usually contains "seed files", which hold data you can use to populate your database tables with sample or test data. You will not create or use seed files in this workshop, so feel free to delete the seeders folder.
Configuration

Let's first look inside the config folder, which contains a file named config.json. This file holds the database configurations for the three main environments you need in an application:

    Development: For when you're programming your app
    Testing: For running automated tests to make sure your code interacts correctly with the database
    Production: For the live site using the "actual data" your application needs

{
  "development": {
    "username": "root",
    "password": null,
    "database": "database_development",
    "host": "127.0.0.1",
    "dialect": "mysql",
    "operatorsAliases": false
  },
  "test": {
    "username": "root",
    "password": null,
    "database": "database_test",
    "host": "127.0.0.1",
    "dialect": "mysql",
    "operatorsAliases": false
  },
  "production": {
    "username": "root",
    "password": null,
    "database": "database_production",
    "host": "127.0.0.1",
    "dialect": "mysql",
    "operatorsAliases": false
  }
}

By default, config.json is configured with boilerplate credentials for a MySQL database. But the project might use other relational databases -- in this case, SQLite.

The "Getting Started" page of the Sequelize documentation has a section on how to set up a database connection.

Sequelize docs

You can specify the options shown in the examples in your config.json file for each of the three environments. Ideally, in development, you use the same database you use in production. But it's not uncommon to use different databases. For instance, you might use SQLite in development and testing so that you don’t need to install and run a large database on your computer, and use PostgreSQL for a more powerful Linux server in production.

In a previous course on Sequelize, you configured Sequelize and initialized a connection to the database by passing the Sequelize() constructor an object with connection parameters. For example:

const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: 'movies.db'
});

The Sequelize CLI sets up configuration for you in config.json. For example, the dialect property specifies the version of SQL you're using (the SQL dialect of the database) for each environment. Since SQLite is a file-based database that doesn't require username and password credentials or a host, you use the storage key to specify the file path or the storage path for SQLite.

For example, the value 'development.db' will create a database in your project named 'development'.

    Omit the username, password, database, and host keys from each environment object, and include a storage key inside each object as shown below:

{
  "development": {
    "dialect": "sqlite",
    "storage": "development.db"
  },
  "test": {
    "dialect": "sqlite",
    "storage": "test.db"
  },
  "production": {
    "dialect": "sqlite",
    "storage": "production.db"
  }
}

Create a Model

Another important folder generated by the Sequelize CLI is models, which holds all your models – the code that maps JavaScript objects to database tables. The index.js file inside the models folder is the entry point file for models. It imports and syncs up all the models you define, and it exposes the Sequelize package whenever you import models into your application code.

This means that wherever you use require("./models"), for example, you'll have access to all of Sequelize's methods and functionality via the following exports:

...
db.sequelize = sequelize; //Add any new model to the `db` object
db.Sequelize = Sequelize; //Assign the Sequelize module to a `Sequelize` property in the `db` object

module.exports = db; //export `db` object

Start by defining an Article model that maps to columns in a database table named Articles.

    Create a new file named article.js inside the 'models' folder. Models are often defined as JavaScript classes containing a collection of attributes (or class properties) that are used to describe each model instance.

    Add the following code inside models/article.js to define and initialize the Article model:

    'use strict';
    const Sequelize = require('sequelize');

    module.exports = (sequelize) => {
      class Article extends Sequelize.Model {}
      Article.init({

      }, { sequelize });

      return Article;
    };

    If you need a refresher on defining models with Sequelize, be sure to review the Define a Model and the Go Further with Models lessons from the course Using SQL ORMs with Node.js.

    The Article model needs to have the following attributes (or columns): title, author, and body.

    Add the Article attributes inside the object literal that defines model attributes. Each attribute (or column) must specify a data type, so be sure to include the data types shown below:

    'use strict';
    const Sequelize = require('sequelize');

    module.exports = (sequelize) => {
      class Article extends Sequelize.Model {}
      Article.init({
        title: Sequelize.STRING,
        author: Sequelize.STRING,
        body: Sequelize.TEXT
      }, { sequelize });

      return Article;
    };

The Article model is now exported and included within the model code in the index.js file.
Note: The Sequelize CLI provides the model:generate() (and model:create) command, which generates a model with the attributes you specify. At the time of writing, the CLI generates models using sequelize.define() instead of a JavaScript class. Because of this, we created the article.js file manually vs. using the CLI command.
Synchronize Models with the Database

Finally, let's set up Sequelize to synchronize models with the database. You've learned that the sync() method automatically creates or updates your database tables according to your model definition. We can automatically sync models with the database by calling sync() every time the server starts. An ideal place to sync models is in the executable file that starts the app, bin/www. The Express application generator creates this file to start the server (on port 3000 by default) and set up basic error handling.

    Open the file bin/www. Find the line of code (~line 28) where the server starts listening with server.listen(port).

    Synchronize all models by calling sequelize.sync() first. Then, once the database updates are complete, start listening with the web server as shown below:

    /**
     * Listen on provided port, on all network interfaces.
     */

    sequelize.sync().then(() => {
      server.listen(port);
    });
    server.on('error', onError);
    server.on('listening', onListening);

    Since the file now references sequelize, be sure to require sequelize from the models index file at the top of the www file:

    var app = require('../app');
    var debug = require('debug')('sequelize-with-express:server');
    var http = require('http');
    var sequelize = require('../models').sequelize; // import Sequelize

Saving the latest changes (or running npm start) should generate a development.db file in the root of the application folder.
Note: If sync() is omitted in development, Sequelize will not create or modify tables as specified in the model.

With the database code set up, you can now focus on the important parts of the application. There's currently no data in the database, so in the next video, you'll begin to work on the routes for data creation.